{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/inias/Desktop/ap/j2s1/WebFrameworks/Examenopgave/Quiz_opgave/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { lastValueFrom } from 'rxjs/internal/lastValueFrom';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class QuizService {\n  constructor(_http) {\n    this._http = _http;\n    this.name = \"\";\n    this.questionsList = [];\n    this.loadQuestions();\n  }\n\n  get Name() {\n    return this.name;\n  }\n\n  loadQuestions() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let questions = yield _this.getQuestionsFromAPI();\n      _this.questionsList = questions;\n    })();\n  }\n\n  getQuestionsFromAPI() {\n    return lastValueFrom(this._http.get(\"http://localhost:3000/questions\"));\n  }\n\n  getQuestionsByDifficulty(difficulty, amount) {\n    let qByDiff = this.questionsList.filter(q => q.difficulty == difficulty);\n    let usedIndexes = [];\n    let questions = [];\n\n    for (let i = 0; i < amount; i++) {\n      let index = Math.floor(Math.random() * qByDiff.length + 1);\n\n      while (usedIndexes.find(p => p == index)) {\n        index = Math.floor(Math.random() * qByDiff.length + 1);\n      }\n\n      usedIndexes.push(index);\n      questions.push(qByDiff[index]);\n    }\n\n    return questions;\n  }\n\n}\n\nQuizService.ɵfac = function QuizService_Factory(t) {\n  return new (t || QuizService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nQuizService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: QuizService,\n  factory: QuizService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAEA,SAASA,aAAT,QAA8B,6BAA9B;;;AAMA,OAAM,MAAOC,WAAP,CAAkB;EAKtBC,YAAoBC,KAApB,EAAqC;IAAjB;IAHZ,YAAe,EAAf;IACA,qBAA4B,EAA5B;IAGN,KAAKC,aAAL;EACD;;EAEO,IAAJC,IAAI;IACN,OAAO,KAAKC,IAAZ;EACD;;EAEKF,aAAa;IAAA;;IAAA;MACjB,IAAIG,SAAS,SAAS,KAAI,CAACC,mBAAL,EAAtB;MACA,KAAI,CAACC,aAAL,GAAqBF,SAArB;IAFiB;EAGlB;;EAEMC,mBAAmB;IACxB,OAAOR,aAAa,CAAC,KAAKG,KAAL,CAAWO,GAAX,CAA2B,iCAA3B,CAAD,CAApB;EACD;;EAEDC,wBAAwB,CAACC,UAAD,EAAqBC,MAArB,EAAmC;IACzD,IAAIC,OAAO,GAAc,KAAKL,aAAL,CAAmBM,MAAnB,CAA2BC,CAAD,IAAOA,CAAC,CAACJ,UAAF,IAAgBA,UAAjD,CAAzB;IACA,IAAIK,WAAW,GAAa,EAA5B;IACA,IAAIV,SAAS,GAAe,EAA5B;;IAEA,KAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,MAApB,EAA4BK,CAAC,EAA7B,EAAiC;MAC/B,IAAIC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAYD,IAAI,CAACE,MAAL,KAAcR,OAAO,CAACS,MAAvB,GAA+B,CAA1C,CAAZ;;MACA,OAAON,WAAW,CAACO,IAAZ,CAAkBC,CAAD,IAAOA,CAAC,IAAIN,KAA7B,CAAP,EAA4C;QAC1CA,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAYD,IAAI,CAACE,MAAL,KAAcR,OAAO,CAACS,MAAvB,GAA+B,CAA1C,CAAR;MACD;;MACDN,WAAW,CAACS,IAAZ,CAAiBP,KAAjB;MAEAZ,SAAS,CAACmB,IAAV,CAAeZ,OAAO,CAACK,KAAD,CAAtB;IACD;;IAED,OAAOZ,SAAP;EACD;;AAtCqB;;;mBAAXN,aAAW0B;AAAA;;;SAAX1B;EAAW2B,SAAX3B,WAAW;EAAA4B,YAFV","names":["lastValueFrom","QuizService","constructor","_http","loadQuestions","Name","name","questions","getQuestionsFromAPI","questionsList","get","getQuestionsByDifficulty","difficulty","amount","qByDiff","filter","q","usedIndexes","i","index","Math","floor","random","length","find","p","push","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\inias\\Desktop\\ap\\j2s1\\WebFrameworks\\Examenopgave\\Quiz_opgave\\src\\app\\services\\quiz.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { lastValueFrom } from 'rxjs/internal/lastValueFrom';\nimport { Question } from './types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuizService {\n\n  private name: string = \"\";\n  private questionsList: Question[] = [];\n\n  constructor(private _http: HttpClient) {\n    this.loadQuestions();\n  }\n\n  get Name(): string {\n    return this.name;\n  }\n\n  async loadQuestions() {\n    let questions = await this.getQuestionsFromAPI();\n    this.questionsList = questions;\n  }\n\n  public getQuestionsFromAPI() : Promise<Question[]> {\n    return lastValueFrom(this._http.get<Question[]>(\"http://localhost:3000/questions\"));\n  }\n\n  getQuestionsByDifficulty(difficulty: string, amount: number): Question[] {\n    let qByDiff:Question[] = this.questionsList.filter((q) => q.difficulty == difficulty);\n    let usedIndexes: number[] = [];\n    let questions: Question[] = [];\n    \n    for (let i = 0; i < amount; i++) {\n      let index = Math.floor((Math.random()*qByDiff.length)+1);\n      while (usedIndexes.find((p) => p == index)) {\n        index = Math.floor((Math.random()*qByDiff.length)+1);\n      }\n      usedIndexes.push(index);\n\n      questions.push(qByDiff[index]);\n    }\n\n    return questions;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}