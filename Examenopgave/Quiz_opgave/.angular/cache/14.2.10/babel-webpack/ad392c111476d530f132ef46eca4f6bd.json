{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/inias/Desktop/ap/j2s1/WebFrameworks/Examenopgave/Quiz_opgave/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { lastValueFrom } from 'rxjs/internal/lastValueFrom';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class QuizService {\n  constructor(_http) {\n    this._http = _http;\n    this.name = \"\";\n    this.questionsList = [];\n    this.points = 0; // this.loadQuestions();\n  }\n\n  get Name() {\n    return this.name;\n  } // async loadQuestions() {\n  //   let questions = await this.getQuestionsFromAPI();\n  //   this.questionsList = questions;\n  // }\n  // public getQuestionsFromAPI() : Promise<Question[]> {\n  //   return lastValueFrom(this._http.get<Question[]>(\"http://localhost:3000/questions\"));\n  // }\n\n\n  get Questions() {} // getQuestionsByDifficulty(difficulty: string, amount: number): Question[] {\n  //   let qByDiff:Question[] = this.questionsList.filter((q) => q.difficulty == difficulty);\n  //   let usedIndexes: number[] = [];\n  //   let questions: Question[] = [];\n  //   // TODO: soms worden de vragen niet geladen (als je via de url navigeert en niet via de buttons op home component)\n  //   if (qByDiff.length > 0) {\n  //     for (let i = 0; i < amount; i++) {\n  //       let index = Math.floor((Math.random()*qByDiff.length)+1);\n  //       while (usedIndexes.find((p) => p == index)) {\n  //         index = Math.floor((Math.random()*qByDiff.length)+1);\n  //       }\n  //       usedIndexes.push(index);\n  //       questions.push(qByDiff[index]);\n  //     }\n  //   }\n  //   return questions;\n  // }\n\n\n  get HighScores() {\n    return this._http.get(\"http://localhost:3000/high-scores\");\n  }\n\n  createHighscore(score) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return yield lastValueFrom(_this._http.post(\"http://localhost:3000/high-scores\", score));\n    })();\n  }\n\n  finish(points) {\n    this.points = points;\n  }\n\n  get Points() {\n    return this.points;\n  }\n\n}\n\nQuizService.ɵfac = function QuizService_Factory(t) {\n  return new (t || QuizService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nQuizService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: QuizService,\n  factory: QuizService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAGA,SAASA,aAAT,QAA8B,6BAA9B;;;AAMA,OAAM,MAAOC,WAAP,CAAkB;EAMtBC,YAAoBC,KAApB,EAAqC;IAAjB;IAJZ,YAAe,EAAf;IACA,qBAA4B,EAA5B;IACA,cAAiB,CAAjB,CAE6B,CACnC;EACD;;EAEO,IAAJC,IAAI;IACN,OAAO,KAAKC,IAAZ;EACD,CAZqB,CActB;EACA;EACA;EACA;EAEA;EACA;EACA;;;EAEa,IAATC,SAAS,IAA0B,CAvBjB,CAyBtB;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EAEA;EACA;;;EAEc,IAAVC,UAAU;IACZ,OAAO,KAAKJ,KAAL,CAAWK,GAAX,CAA4B,mCAA5B,CAAP;EACD;;EAGKC,eAAe,CAACC,KAAD,EAAiB;IAAA;;IAAA;MACpC,aAAaV,aAAa,CAAC,KAAI,CAACG,KAAL,CAAWQ,IAAX,CAA2B,mCAA3B,EAAgED,KAAhE,CAAD,CAA1B;IADoC;EAErC;;EAEDE,MAAM,CAACC,MAAD,EAAc;IAClB,KAAKA,MAAL,GAAcA,MAAd;EACD;;EAES,IAANC,MAAM;IACR,OAAO,KAAKD,MAAZ;EACD;;AA7DqB;;;mBAAXZ,aAAWc;AAAA;;;SAAXd;EAAWe,SAAXf,WAAW;EAAAgB,YAFV","names":["lastValueFrom","QuizService","constructor","_http","Name","name","Questions","HighScores","get","createHighscore","score","post","finish","points","Points","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\inias\\Desktop\\ap\\j2s1\\WebFrameworks\\Examenopgave\\Quiz_opgave\\src\\app\\services\\quiz.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { lastValueFrom } from 'rxjs/internal/lastValueFrom';\nimport { HighScore, Question } from './types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuizService {\n\n  private name: string = \"\";\n  private questionsList: Question[] = [];\n  private points: number = 0;\n\n  constructor(private _http: HttpClient) {\n    // this.loadQuestions();\n  }\n\n  get Name(): string {\n    return this.name;\n  }\n\n  // async loadQuestions() {\n  //   let questions = await this.getQuestionsFromAPI();\n  //   this.questionsList = questions;\n  // }\n\n  // public getQuestionsFromAPI() : Promise<Question[]> {\n  //   return lastValueFrom(this._http.get<Question[]>(\"http://localhost:3000/questions\"));\n  // }\n\n  get Questions(): Observable<Question[]>\n\n  // getQuestionsByDifficulty(difficulty: string, amount: number): Question[] {\n  //   let qByDiff:Question[] = this.questionsList.filter((q) => q.difficulty == difficulty);\n  //   let usedIndexes: number[] = [];\n  //   let questions: Question[] = [];\n    \n  //   // TODO: soms worden de vragen niet geladen (als je via de url navigeert en niet via de buttons op home component)\n  //   if (qByDiff.length > 0) {\n  //     for (let i = 0; i < amount; i++) {\n  //       let index = Math.floor((Math.random()*qByDiff.length)+1);\n  //       while (usedIndexes.find((p) => p == index)) {\n  //         index = Math.floor((Math.random()*qByDiff.length)+1);\n  //       }\n  //       usedIndexes.push(index);\n  \n  //       questions.push(qByDiff[index]);\n  //     }\n  //   }\n\n  //   return questions;\n  // }\n\n  get HighScores(): Observable<HighScore[]> {\n    return this._http.get<HighScore[]>(\"http://localhost:3000/high-scores\");\n  }\n\n\n  async createHighscore(score: HighScore): Promise<HighScore> {\n    return await lastValueFrom(this._http.post<HighScore>(\"http://localhost:3000/high-scores\", score));\n  }\n\n  finish(points:number) {\n    this.points = points;\n  }\n\n  get Points() {\n    return this.points;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}